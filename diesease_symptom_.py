# -*- coding: utf-8 -*-
"""diesease symptom .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nZbm26vxrRhug1NJnX5zegC5EFpDslqG
"""

import kagglehub
import pandas as pd

# Download dataset
path = kagglehub.dataset_download("dhivyeshrk/diseases-and-symptoms-dataset")
print("Path to dataset files:", path)

# Load the dataset
df = pd.read_csv(f"{path}/Final_Augmented_dataset_Diseases_and_Symptoms.csv")
print("Dataset preview:")
print(df.head())

from sklearn.model_selection import train_test_split

# Separate features and target labels
X = df.drop('diseases', axis=1)  # Features (symptoms)
y = df['diseases']  # Labels (diseases)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
import joblib

# Train a Logistic Regression model
clf = LogisticRegression(max_iter=1000)
clf.fit(X_train, y_train)

# Evaluate the model
y_pred = clf.predict(X_test)
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Save the trained model
joblib.dump(clf, 'disease_prediction_model.pkl')
print("Model saved as 'disease_prediction_model.pkl'")

!pip install gradio
import gradio as gr
import joblib
import pandas as pd

# Load the trained model
model = joblib.load('disease_prediction_model.pkl')

# Define symptom names (column headers except 'diseases')
symptom_columns = X.columns

# Function to predict disease
def predict_disease(symptom_values):
    input_data = pd.DataFrame([symptom_values], columns=symptom_columns)
    prediction = model.predict(input_data)[0]
    return f"The predicted disease is: {prediction}"

# Gradio Interface
with gr.Blocks() as demo:
    gr.Markdown("# üè• Disease Prediction App")
    gr.Markdown("""
    Welcome to the **Disease Prediction App**. Select the symptoms you are experiencing, and the model will predict the most likely disease.
    """)

    with gr.Row():
        with gr.Column():
            gr.Markdown("### Select Your Symptoms")
            symptom_inputs = [gr.Checkbox(label=symptom) for symptom in symptom_columns]
        with gr.Column():
            gr.Markdown("### Prediction Result")
            output_label = gr.Label(label="Prediction will appear here")

    predict_button = gr.Button("üîÆ Predict Disease")

    def on_predict(*symptoms):
        symptom_values = [1 if symptom else 0 for symptom in symptoms]
        return predict_disease(symptom_values)

    predict_button.click(on_predict, symptom_inputs, output_label)

    gr.Markdown("""
    **Note:** This tool is for educational purposes and should not replace professional medical advice.
    """)

# Launch the app
demo.launch(share=True)

























